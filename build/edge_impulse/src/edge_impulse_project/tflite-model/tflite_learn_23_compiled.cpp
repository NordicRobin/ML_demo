/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.03.2024 08:40:03

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1472;
#else
constexpr int kTensorArenaSize = 448;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,84 } };
const TfArray<1, float> quant0_scale = { 1, { 0.027897663414478302, } };
const TfArray<1, int> quant0_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 462, -133, -141, -262, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const TfArray<1, float> quant1_scale = { 1, { 6.5407628426328301e-05, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[4*20] = { 
  79, 63, 101, -40, 4, -93, -127, -19, 113, 53, 52, -5, -53, 112, 11, -100, -34, 53, -86, -22, 
  55, -24, -102, -106, -86, -94, 4, 27, -48, 13, 83, 21, 63, -17, 27, 54, 66, 19, 27, 104, 
  -105, 93, -80, -96, 90, -84, 102, 58, 60, -67, 40, 52, 17, 8, 41, 87, 109, -45, -122, 68, 
  16, -17, 12, 50, 21, -57, 91, -35, -91, -107, -18, 41, -119, -76, 97, 112, 18, -87, -89, 119, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0043682618997991085, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[20] = { 422, -255, 6, 0, -35, -659, 39, -213, 242, 0, -209, -94, 498, 650, -619, 95, -274, -161, -146, 65, };
const TfArray<1, int> tensor_dimension3 = { 1, { 20 } };
const TfArray<1, float> quant3_scale = { 1, { 5.0497441407060251e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[20*40] = { 
  41, -62, 99, 105, 11, 24, 69, 73, 5, -65, 106, 71, -107, 60, -48, 90, -87, 102, -29, 53, 60, -11, -2, 43, -4, -52, -11, -5, 10, -82, 84, 2, -28, -41, -62, -10, 89, 76, 41, -20, 
  -56, 63, 45, -48, -90, -50, 54, 60, -51, -41, 3, -93, 98, -69, -68, 96, -59, 10, -39, 59, 39, -4, -82, 68, 96, -98, -31, 11, 37, 62, -3, 59, 74, 82, 73, -101, 80, 22, -69, -18, 
  -20, -3, -33, -33, -34, 18, -14, 5, 81, -93, -55, -11, 104, -41, -12, 7, -42, 19, -31, -92, 76, 83, 85, -92, 96, -34, 87, 81, -63, 36, -99, 115, -20, 120, -95, -74, 31, 88, -36, -3, 
  54, 87, -61, -54, -26, 92, -68, -4, -25, 98, 103, -65, 30, 15, -11, 66, 49, 35, -80, 44, -67, 0, -84, 13, -80, 61, -45, -75, -48, -49, -58, 16, -83, -20, -37, -79, -41, -69, -105, -42, 
  -40, -89, -71, -33, -92, 93, -21, 5, -45, 67, -107, 80, -18, -23, 57, 22, -87, 54, -56, 4, -50, 102, -31, -30, 97, -46, 71, 34, -15, 12, -78, -80, -27, -59, 63, 105, 4, 103, 80, 53, 
  -93, -64, -39, -6, -111, 60, -57, -26, -45, -63, -110, 48, -43, -19, 5, -110, -7, 36, -74, 3, 74, -80, -91, -102, -45, 66, -38, 71, 42, 26, 99, -103, 38, 29, 62, -38, 39, 42, 54, -41, 
  90, -54, 81, 10, -32, 54, -67, -8, 59, -15, -26, -4, 74, -52, -102, -80, -16, 48, 3, 107, -32, -24, -43, 31, -69, 78, 85, 0, -106, -38, -5, -74, 52, 118, -47, 83, 35, -73, 32, 49, 
  -17, 43, -14, 81, 101, -58, 58, -97, 76, 12, 5, -64, 62, -33, -86, -41, 92, -100, 22, 85, 90, 49, -64, -77, 63, -102, -19, -95, 80, -67, 90, 96, -82, -68, 87, -47, -77, 42, -41, 28, 
  56, 51, 77, -101, -15, 104, -3, -32, -82, -44, 40, 37, 94, 57, 29, -27, 23, -93, 17, -89, -95, -16, 63, 61, 67, 29, -10, -18, 12, 33, 104, 23, -100, 12, 50, 101, 47, 14, -94, -48, 
  41, -15, 74, -18, 71, -55, -69, 52, -17, 2, 103, -90, 38, -48, 31, 47, -29, -85, -1, -33, 104, 3, -103, -17, -16, -3, 90, 13, -85, -92, 38, 78, -48, -106, -84, -106, 57, 38, -74, 23, 
  -75, 12, 10, -97, -50, 16, 101, -77, -28, 23, -87, 20, 26, 82, 47, 74, -75, -92, -1, -64, 30, -20, -88, 34, 73, -76, 103, -97, -44, 62, -72, 19, 33, 67, 17, 7, 21, -89, 40, -46, 
  -107, 62, -39, -89, 17, -50, 19, 83, 30, -28, -55, 50, 36, -63, -44, -18, -91, -16, 48, 3, 77, 42, 1, -47, 40, 44, -13, 31, 24, -76, 3, 49, 0, -17, 56, -21, -42, -52, 46, -88, 
  -81, 97, -47, 19, -3, 56, -73, -57, -82, -75, 71, -99, -28, 62, 80, 66, 56, 73, 21, 39, -62, 89, 55, -99, 15, -43, 106, 8, -18, 1, -85, 37, 11, 106, 36, 36, -50, -75, -53, -91, 
  19, 3, 76, -42, 82, 62, -77, -32, -42, 78, 100, -15, -91, 24, 65, 115, 87, 9, 67, -26, 22, -15, 53, 89, 12, 17, 25, 76, -82, 53, 92, -70, -72, -52, 90, -19, -25, -10, 27, 99, 
  55, -40, 70, 25, 42, 35, 39, -107, 87, 53, -30, -87, -69, 40, -78, 27, 4, 67, -79, -6, -59, -6, -93, 46, 10, -19, -19, 77, 25, -29, 12, 103, -80, 127, -64, 29, 44, -45, 77, -15, 
  66, 47, -106, 72, -43, 57, 59, -63, 59, 4, 79, -5, 39, 5, -65, 69, -101, 66, 31, 98, -46, -8, 76, -76, -17, -11, 65, -98, -16, 42, 64, -86, 74, 98, 6, -97, 55, 87, -61, -65, 
  38, -73, 61, -31, -8, 36, -47, -32, -21, -32, -43, -98, 42, 69, 74, 10, -47, -37, -19, -85, 94, 28, -11, 48, -104, -28, 64, -25, -93, 100, -63, -46, 105, -5, 13, 19, 16, 13, 0, -96, 
  82, 57, 77, -102, -30, 101, -28, 40, 2, 78, 49, -58, 86, 104, -47, -8, -72, -74, 92, -24, 55, -24, -68, -61, -43, -94, -73, -107, -31, 55, -58, 77, 14, -21, 11, 49, -100, 1, -85, 58, 
  31, 38, 17, -24, 7, 7, -103, 101, 64, -30, -85, 51, -80, -100, -45, 104, 10, -79, 99, 103, -57, -36, 24, 102, 78, 99, -95, 37, 78, 85, 91, 8, -87, 56, -2, -4, -40, 105, 72, 66, 
  -61, -2, 99, 10, -92, 35, -49, -10, 88, 71, -117, 5, -60, 7, -82, -83, -26, 98, -32, 62, 42, -109, 66, 107, -17, -24, 14, 86, -74, 87, -55, 89, 49, 9, -7, 66, 98, 98, -40, -13, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,40 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0029294281266629696, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[40] = { -18, 0, 335, 0, 274, 310, -310, 497, -274, 0, 644, 423, -164, 111, 157, 676, 325, 39, 0, -94, -137, -227, 0, 305, 0, 81, -104, 255, -149, -142, 552, -274, 339, -66, 0, -30, 133, 0, 0, -114, };
const TfArray<1, int> tensor_dimension5 = { 1, { 40 } };
const TfArray<1, float> quant5_scale = { 1, { 5.9588601288851351e-05, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[40*84] = { 
  -1, -24, 27, 35, 41, -10, -97, -10, 18, -56, 78, 78, -94, -43, -72, 24, 62, -82, -50, -24, 33, -80, -86, -49, -84, -31, 45, -76, 95, 100, 38, 9, -18, 2, 88, 20, -65, -20, 69, -11, 38, -8, -22, -103, -77, 35, -50, -15, 93, -65, -14, 18, -33, -41, -66, 89, 3, -52, -47, -95, 53, 14, -107, 56, 89, -94, 84, 75, 18, -27, 47, -70, -40, -12, -46, -59, -38, 39, 81, -112, 20, -69, -36, -53, 
  -100, 83, -30, 32, 45, -65, 14, 62, 79, 103, -17, 83, 52, -18, -25, -16, 88, 69, -81, 27, -42, 99, 58, 75, 8, -93, 4, -13, -96, 85, -18, -41, -25, 76, 56, 92, 60, 15, -32, -7, -13, -52, 46, -21, 19, 32, 91, 6, -48, 17, 22, -1, -70, 75, -18, -29, 100, -29, 26, -75, 25, -32, 47, -2, -84, -35, 63, 95, -64, -15, -97, -10, 4, 63, -39, -47, -46, -39, 62, -70, -60, 56, -84, -77, 
  75, -75, 56, 69, 100, -82, -78, -68, 36, -4, 92, 51, 24, 92, -45, -41, 63, -5, -72, 43, 37, -105, 35, -68, 20, 37, -31, 61, 20, 23, 104, -3, -16, 9, -41, -14, 4, -29, -98, -62, 45, 49, 16, -17, -70, -59, 37, 87, 17, 43, -97, -66, 31, 76, -5, -35, 17, -57, 55, -14, -46, 95, 81, 27, -77, 49, 8, 43, -41, 68, -6, 101, -74, -72, -22, 30, -48, 49, 70, 66, -7, 9, -10, -29, 
  -84, -54, -8, -10, 50, 83, 49, 44, -78, 34, -67, -66, 61, -73, 85, -45, 85, 61, 99, 19, -84, 1, 97, -4, 60, -66, -20, 24, -87, -41, 92, 96, -67, 58, -64, 58, -55, 22, -25, 36, 20, 70, -19, -9, 62, 41, -84, 84, -61, 79, -33, 82, -49, 12, 18, -85, -3, 6, -92, 71, -94, 4, -85, -1, 25, -39, -27, -20, -67, 8, 62, 25, 18, -42, -34, -26, 82, -65, 37, -56, -35, 84, -54, -34, 
  90, 22, -75, 96, -38, -40, -74, -72, 66, -19, -22, -31, -33, 85, -93, 45, 93, -19, -17, 7, -4, -101, 63, 60, -35, 50, -83, -15, 72, 96, -80, 108, 22, -60, -116, -96, 70, 25, -50, -66, 77, 52, 35, 22, 72, -22, 42, 13, 3, -88, -24, 7, 75, -113, -64, -63, -53, 44, -33, -44, 100, -69, -98, 98, -41, -43, 29, -34, 57, -86, 35, 64, 71, 91, -75, -26, -47, 40, 93, 77, -53, -105, -91, 12, 
  -23, 19, -33, 13, -33, -100, -106, 37, -109, -36, -85, -14, 50, 41, -44, -17, 84, 31, 77, 33, 63, -67, 25, -84, -16, 82, 45, 53, 43, 64, 33, 51, -46, -21, 105, 93, 62, -85, 8, 82, -63, -43, -3, 34, 106, 0, -75, 14, -1, 14, -17, 95, 32, 112, 27, -13, 39, 83, 61, 27, -98, -81, 4, -29, -42, 7, -67, 19, 52, 79, 61, 5, 22, 95, 98, 68, 29, 86, -30, -46, 47, 46, 61, 122, 
  40, -52, -79, -18, -19, -20, -14, 36, -34, 84, -58, -61, -48, 125, 70, 49, -17, -83, -97, -77, -8, -2, -56, 102, 3, -63, -90, 49, 0, 42, -77, 88, 61, -105, -89, 6, -20, 16, 40, 31, 92, 4, -70, 47, -62, -62, -30, -40, -57, -100, -58, -6, 93, -25, -51, -7, 58, 25, 57, -74, -44, -96, -50, -4, -35, 31, -12, 56, -84, 75, 29, -55, -88, 72, 74, -66, -8, -50, 11, 66, 107, -22, 65, -62, 
  89, 49, 108, 14, -51, -6, -20, -92, -21, -53, 98, -39, 1, -50, -82, 40, 39, -35, -13, 65, -23, 88, 24, 17, -74, -74, -40, -48, -75, 84, -52, 66, 69, 10, -63, -62, -29, -17, -59, -69, 78, 49, 39, 59, 84, -8, 31, -100, -51, -7, -25, -22, -35, -63, 80, -52, 31, 91, 82, -46, -44, 1, 46, -62, -16, 68, -20, -60, -23, 14, 1, 74, 52, -9, 64, 57, 10, 68, -19, -16, -23, 25, -30, -123, 
  50, 61, -87, -27, -25, 23, 75, -5, 58, 117, 110, 107, 85, 53, 86, 62, -16, -102, -107, -49, -34, -84, -96, -17, -33, -76, 87, 35, 7, -18, 57, 81, 1, 94, 68, -44, 23, -27, -68, -52, -68, -91, 85, -3, 56, -8, -99, 88, 102, 28, -67, -38, 22, -17, 30, -47, 11, 68, 22, 70, 56, 20, 68, 34, -104, -78, -87, -57, -81, 12, 84, 72, -86, 25, -110, 109, -38, -56, -107, 74, 79, 33, -29, -112, 
  -85, -87, -59, -93, -56, -87, -103, -65, -11, 72, -21, 20, 103, 5, -3, -45, -75, 72, 69, -15, 23, -55, -43, 66, 88, 53, -98, -61, 57, -93, -91, -71, 1, -96, -70, -64, 88, -18, 94, -102, 51, -87, -73, -70, 49, 81, -29, 12, -3, -79, 64, -88, 14, -103, 41, 48, -43, 87, 81, 68, 81, -50, -56, 73, -51, -47, -37, -86, 89, 16, 79, 37, 11, 93, -101, -101, -51, 88, -83, -88, -23, 44, 3, -39, 
  116, 59, -67, 81, 16, -99, 5, 67, 1, 15, -110, -115, 64, -25, 86, -92, -69, 123, -7, -102, 18, 3, -24, -14, 40, -53, -23, 97, -49, 39, 43, 81, 38, -106, 34, 61, -10, -15, 12, 33, -22, 30, -29, -25, -24, 10, 60, -27, -69, -92, 88, 35, 33, -10, 73, -40, 52, -79, -11, -19, -33, -80, 66, -74, 61, 47, -99, 13, -8, 100, -26, -35, -3, 7, 57, -19, 34, -61, -32, -33, 61, 62, -5, 16, 
  -3, 102, -67, 116, 88, 73, 52, -52, -39, 78, -38, 84, 34, 78, 109, -6, 12, 45, -53, 9, 26, 71, -58, 5, -106, -94, 19, 108, 63, 25, 91, 17, 92, 47, -40, -79, -62, 62, 26, 25, 49, -82, -89, -61, -3, 71, -79, -1, 24, -26, -9, 56, 42, -11, -9, -14, 53, -79, -81, 80, 117, -9, -24, -61, 111, -78, 25, -106, -72, -29, 2, -10, 75, 18, -55, 57, -28, -10, 68, -23, 75, -9, -94, -54, 
  -52, -9, 52, -58, -76, -29, 20, -13, -3, 81, 43, -68, 29, 18, 81, -49, -104, 67, 85, -91, -15, -73, -94, 91, -22, 65, -83, -62, -74, -27, -41, -90, 4, 79, 21, 2, 45, 40, -29, -76, 31, 93, 91, -98, -2, -83, 9, -62, 47, 80, -76, 60, 5, 4, 58, -8, -1, -70, -51, 90, 61, 32, 33, -109, -56, -8, 79, 30, 57, 73, 58, 77, -43, -96, -27, 17, -8, -6, -84, -41, 70, -105, -67, 18, 
  26, -62, 85, -71, 2, 3, 74, -4, -114, -98, -93, -21, -61, -48, -22, 21, -82, -1, 59, 69, 81, 80, 89, -18, 89, 20, -67, 109, 20, 52, 2, -10, 73, 76, 14, -92, 63, 42, -60, 42, -23, -18, 52, 67, -9, 14, -62, -106, -53, 13, 17, 17, -71, -7, -34, 67, -59, -59, 64, 72, 10, -60, 79, -92, 46, -98, 15, -98, 51, -38, 85, 50, -32, 59, 69, -53, -92, -11, -55, 50, -35, 38, 10, 80, 
  96, -57, 6, -31, 64, 83, -103, -80, -107, 42, 70, -67, -117, 4, 77, 98, -47, 2, -64, 63, -120, -107, -9, -56, -119, -38, 48, -61, 95, 94, 12, -58, 18, 83, -23, 13, 84, 84, -48, -7, 69, -58, 17, 74, -84, -39, -10, -97, 71, 96, -98, -74, -95, 56, -43, -43, 102, -87, 107, 90, -38, -26, -85, -23, 104, -49, -19, 55, 101, -72, -34, -36, 72, 54, 76, -50, 61, 62, -24, -46, 18, -13, -79, 64, 
  19, -55, -74, -5, 38, -10, -59, 25, 38, 32, -104, -88, 43, -49, -4, 42, -19, 12, 22, 5, 38, 12, 57, -113, -103, 21, 63, 48, 107, -53, 24, 42, 40, -8, -15, -105, 87, 18, -69, 63, -80, 21, 118, 25, 76, 21, 46, 73, -109, 65, 81, 73, 41, -9, 82, 32, -81, 78, -17, 6, -50, -19, 29, -49, -21, -27, 5, -76, -50, 31, -36, -28, 99, 108, 6, 39, -55, 71, -25, -64, -81, -95, 0, -107, 
  9, -38, 86, -24, 49, -101, 12, -18, -85, 33, -97, 27, 24, -3, -70, 36, 82, -15, 46, -62, -16, 20, 3, 64, -25, -8, -13, 1, -6, 74, -58, -58, -70, -1, -4, -78, -54, 74, -50, -63, 32, -100, -3, 6, 101, 18, 99, 9, 5, 86, -22, -22, 83, 44, -7, 52, 80, -82, -18, -49, 60, -72, 86, -12, 96, -28, -26, -80, 68, 99, 89, 60, -48, 111, 10, -71, 60, -12, 53, -84, -109, -35, 85, 102, 
  -18, 90, 73, -52, 23, -24, -24, -85, -63, 106, 68, -64, -55, -63, -2, -12, 2, -7, 81, 88, -81, 113, 24, 26, -59, -31, 82, 16, 78, -27, 26, 41, -30, -2, 42, 75, 72, 56, -72, 84, -84, -102, 58, -37, 23, -12, -105, 85, 54, 78, 91, 18, -46, -71, 32, -102, 80, -67, 73, -63, -74, 39, 14, 56, 88, 65, -48, 20, 91, 10, -98, -90, 55, 13, 70, 66, -85, 21, -32, 57, -62, -84, 78, -114, 
  -86, 54, 49, -67, -3, -95, -87, -76, 6, -56, -51, -56, -44, -4, -91, 47, -65, 101, 28, -79, -74, -61, 3, 103, -81, 6, 46, 65, -67, -28, -32, -67, 50, 89, 5, 64, 77, -97, 92, -30, 29, 89, 49, 87, -5, -97, 65, -74, 56, 96, -103, 24, -51, -53, 5, -70, -101, -57, 46, -89, 88, -27, 29, -22, 6, -90, 3, -15, 27, -43, 72, -15, 85, 25, -17, -5, 83, -1, 48, 97, 28, 37, -31, -43, 
  -4, 14, -9, 14, 55, -65, 88, -22, 13, -37, -22, 98, 16, -88, 43, -61, 92, -10, -112, 25, -49, 31, -6, -77, 9, 44, -100, 28, 52, -71, -82, -72, -73, -19, -78, -101, -27, -26, -90, -93, 61, -17, -17, 97, 33, -94, -66, 32, -69, 90, -30, 68, -18, -99, -12, 109, -89, 37, -18, -61, 85, 60, 44, -80, -60, -58, 97, 27, 44, -62, 43, 42, 4, -90, -40, -81, -5, 3, -81, 15, -62, 96, 23, 41, 
  -17, 90, 55, -77, -96, 50, -52, 68, 88, -36, -12, 31, 86, -67, -88, 37, -81, 27, 57, -48, 6, -36, 76, 105, -53, -79, -40, 50, 72, 58, -42, -66, -66, 28, -18, -92, -25, -60, 44, 78, -20, 35, 12, -8, -93, -22, 89, -95, 51, -48, -96, 48, -40, 1, -58, 34, 61, 84, 25, 21, -12, 106, -7, 17, -23, -48, 41, -43, 95, -4, -3, -61, -22, 33, -69, 76, 71, -40, 26, 11, 94, -28, -49, -99, 
  -14, 2, 6, 37, 104, 33, 10, -39, 33, -69, -19, -28, 32, 89, -81, 86, 89, -38, -19, -38, -47, 73, -27, -63, 15, -4, -18, -95, 74, -89, 61, -37, -20, -81, -7, -50, -9, 103, -35, 111, -91, 2, 2, -81, -32, 13, 5, 77, -62, -83, 95, 6, 68, -45, -14, -96, 24, 87, 18, -69, -90, -58, -10, 23, 95, -32, -30, 59, -25, 60, 7, -52, 56, 48, -58, -37, -39, 75, 76, -47, -71, -45, -29, 35, 
  -13, -72, -53, 85, -9, 16, 49, 71, 60, 43, -95, -80, -26, 50, -79, 67, -73, -33, -6, -78, 53, -17, -19, -81, -26, -23, -2, -83, 14, -28, -35, 17, 59, -57, -34, -99, 86, -87, 55, -61, -55, -3, 17, -2, 0, 85, -36, 69, 51, 29, -87, -72, -40, 72, -17, 53, -81, -84, 103, 44, 82, -98, 85, 67, -6, -62, 50, 49, 75, 35, 89, 92, 2, 10, 13, -52, 10, 99, -32, -75, 72, 91, -61, -18, 
  62, 75, 74, 102, -87, 81, 62, -32, -48, 62, 34, -40, 69, 47, 73, 55, -31, 32, -78, 50, 43, 62, -80, -84, 25, -23, -114, -74, -92, 1, 48, 85, -80, -100, -105, -54, -83, 23, 90, 87, 56, -22, -76, -29, -30, 49, 28, -55, -37, -14, -8, -75, -23, -43, 11, 30, 82, 94, 6, 3, 88, 26, -3, -66, 44, -99, 75, -57, 27, 80, 74, -30, 32, -53, -58, -82, 74, 47, 119, -101, 24, 45, 20, -49, 
  21, -64, -76, -25, 60, 18, -45, 55, 67, -24, 93, -16, 4, 69, -81, -66, -73, -50, -94, 59, 30, -37, -64, 61, 68, 74, -26, 97, 78, 59, -82, 93, 57, 100, -25, 27, 35, 47, -28, -40, -98, -72, -59, -73, -37, 4, 66, 3, -23, -80, -90, -30, -53, -25, 32, -5, -4, -10, -70, -13, -29, -12, 6, -79, 41, -18, -18, -24, 52, 72, 15, 10, -98, 17, -90, 48, -68, 102, -56, -76, 64, -23, -68, -36, 
  79, 3, -73, 93, 12, -27, 56, 2, 30, 17, -79, -42, -14, -31, 105, 0, -53, -87, -51, 80, 32, -31, -95, -76, 50, -22, -44, 54, -10, 13, -92, -84, -3, 83, 48, -38, -79, -63, -19, 3, 25, 76, -74, 1, -12, 8, 79, -12, 32, 65, 25, -59, 10, -69, 55, -3, 61, 16, -82, -69, 51, 21, 100, -34, -88, 39, -36, 95, -77, 89, 1, -51, -52, 97, -41, 19, -95, -4, 86, -10, -112, -86, -98, -41, 
  -32, -59, -103, 75, 11, -11, 56, -13, -49, 76, 17, 63, -13, -81, 23, -97, -15, 62, 45, 99, 19, 8, -85, -58, -24, 81, 60, -8, 82, -39, 8, -59, 30, 62, -58, 93, 48, 58, 78, -48, 65, 33, -32, 23, -47, 67, 96, -101, -64, -12, -61, -31, -19, -72, -2, 52, -104, -26, -43, -32, 24, -2, -85, 47, -88, -99, 46, 78, 42, 98, 57, -105, 8, -87, 68, 82, 83, -97, -44, -54, 32, -75, -40, 53, 
  -93, 93, 35, 34, 77, 106, 47, -111, -46, 102, -56, 5, 93, 21, -8, 98, -85, -107, 16, -23, 39, 98, -10, -75, 63, -16, -1, -72, 77, -94, -26, -77, 26, -39, 104, 20, 44, 20, 63, 52, -108, -8, -90, 50, -29, -93, -63, -37, -81, 75, 66, -85, -27, -84, -28, -91, 53, -35, -10, 32, 18, -77, 45, -77, -23, 1, 27, 69, -30, -14, 66, 87, 69, -87, 8, -31, 68, 20, 8, -23, -74, -9, -37, 19, 
  94, -14, 66, -53, -13, 57, -42, -59, -30, 15, 63, 36, 84, -13, -94, -100, -4, -17, 98, -2, -65, -45, 25, -25, 19, -112, -76, 53, 44, -39, -24, -20, -76, 52, -73, -35, -80, -112, -67, 65, -71, -54, 16, 32, 53, -72, -2, -27, 4, -70, -62, 24, 52, -9, -8, 76, 42, 87, -71, -16, 89, -39, -105, 112, 78, 70, -39, -12, 83, 98, -9, -61, 8, -59, -53, 48, -78, 52, -82, -28, -1, -91, -90, 11, 
  42, -4, 63, -4, -109, -64, -22, 71, 56, -61, 65, 100, 83, 11, 45, -22, 1, 40, 85, 6, 34, 7, -99, 33, -92, 88, -92, 12, 7, 34, -54, 72, -26, -27, 45, 74, -7, -74, -27, 74, 81, -49, 76, -52, 20, 36, -15, 94, -95, -28, -73, -35, -4, -45, 23, -55, -49, 59, 49, 51, -100, 90, 46, -37, 45, -59, -33, 47, -3, -99, -73, -5, 35, -3, -1, -101, -86, -79, 59, -26, -112, 35, -111, -38, 
  38, -84, -27, 36, 52, 12, -97, -64, 2, 4, 30, 61, -19, -13, 74, -78, -12, 112, -58, 7, -35, -50, 77, -118, 18, -85, -15, 111, -29, 1, 51, 88, -80, 26, 9, 8, -50, 71, -81, 82, -61, -54, 75, 32, -40, 116, -34, -14, 15, 44, 63, 22, -68, -113, -2, 14, 64, 28, 101, -40, -68, -94, 29, 14, -77, -61, -113, 12, -80, 76, -64, 31, -88, -17, -21, 33, 67, -49, 33, -19, -110, 13, 7, -48, 
  27, -40, -101, -34, -19, 88, 89, 30, -27, -3, -23, -2, 45, 55, 32, -33, -53, -33, 17, 66, 82, -21, -38, 57, 8, 78, 23, 62, -26, -90, 46, -15, 75, -38, -37, 5, -63, 15, 71, 4, 80, -54, -98, 39, 57, -71, -68, 24, 62, -44, 0, 63, 35, 92, -75, 25, 24, -71, 3, 39, 93, -22, -32, -63, 60, 57, -18, 18, 69, 54, 7, 35, -101, -47, -64, -48, 13, 30, 97, -17, -14, 58, 50, -88, 
  -87, -20, -76, -123, 26, -72, 78, 70, -30, -5, 81, 87, -15, -71, -12, 41, 106, 39, -92, -39, 41, -37, -47, 83, 127, -65, 20, -124, 41, 52, -66, 43, 2, 61, 93, -53, 72, -77, 97, -65, 40, 63, 92, -44, 74, 67, -8, -67, 35, -4, 52, 58, -59, 107, 4, -37, -40, 22, -27, 29, -35, -30, 64, 63, 79, 78, 17, 118, -7, 88, 33, -11, -16, 48, -125, -52, 56, 98, 43, -26, -7, -17, -100, 100, 
  -103, -7, 98, 74, 2, 49, 49, -82, -7, -16, -59, -12, -90, 62, 14, -94, -98, -1, -33, -6, 75, -60, -59, 83, 88, 73, -59, -62, 69, -23, -40, -95, 64, 96, 112, -20, -9, -58, -34, -43, 32, -44, 21, 93, -100, 2, 36, -53, 116, -68, 90, -56, 64, 9, 56, -104, 29, 51, -61, -110, -60, -13, 39, 96, 72, -59, 18, -72, -41, 61, -12, -94, 71, -78, 69, -53, -55, 77, -33, -20, 94, 46, 20, -115, 
  -87, 20, -61, 35, 34, -102, 99, -40, 13, -81, 99, 74, -61, -84, -29, -56, 63, -68, 23, -95, 83, 66, 62, -66, -44, 45, -18, -66, -25, -58, 42, 92, 91, 63, 54, -63, -42, 48, 26, 8, 11, -48, -82, 8, 20, 31, 57, -3, 79, 103, 94, 74, -37, -91, -60, -3, 54, 62, -87, 84, -14, -61, -80, 96, -68, -62, -3, 53, 47, 82, 38, -52, 68, -63, 73, -73, 66, -57, 58, -86, 61, -11, -52, 27, 
  85, -102, 22, 15, 36, 39, 47, 103, 27, 60, 84, 45, -23, -31, -57, -36, 53, 23, -95, 88, -48, -63, -60, -26, 61, -9, 105, -58, 44, 82, -67, -64, 22, -42, 85, 86, 87, 92, 42, 57, -45, 98, 79, 53, 100, 83, 47, 87, 67, 65, 82, -13, -48, 58, -61, -89, 17, -62, -87, -15, 21, -37, -20, -61, -72, -28, 86, -39, -25, 11, 28, -6, 18, 11, -74, -41, 80, 49, 56, -83, 92, 58, -30, 92, 
  -62, -5, -22, -77, -94, -29, 54, 24, -45, -29, -54, -40, -29, 77, 78, 0, -60, -67, -100, 18, -5, 70, -91, -81, -23, 0, -84, -104, -18, -69, 90, 7, 47, -39, 97, -26, 94, 53, 28, 20, 97, -26, 72, -60, -22, 95, 14, -43, -27, -50, -9, -11, 79, 99, -63, 23, -91, 41, 97, -91, -20, -6, 23, -85, 83, 86, 29, 6, -72, -99, -20, -38, 36, 52, 3, -6, 53, -49, 77, -18, 47, 87, -64, -115, 
  50, 72, -32, 85, -13, 99, 72, -34, 27, -56, -43, 101, -79, 33, -59, -77, 25, 101, -55, -86, -30, -31, -67, 97, 50, -59, 54, -76, -89, -49, -80, 96, 54, 2, -29, -37, 93, 25, -76, -79, -93, 17, 95, 24, 45, 99, -52, 53, -36, -94, 41, -62, -103, 96, -101, -47, 4, 30, 100, -15, 93, 90, 43, 86, 89, 44, 80, -21, 60, -22, -94, 71, -2, 42, -6, 85, -74, -28, 39, -51, -92, -6, 75, -49, 
  -26, -100, 9, -10, -36, -39, -72, -53, -60, 39, 85, 80, -89, -29, -71, -44, -92, 81, -69, -34, 21, 53, -16, 23, -94, -87, -59, -72, -64, 73, -54, 80, -53, -83, 90, 56, -47, 31, 18, 35, 43, -3, 18, 10, -82, 81, -33, -74, 23, -63, 101, 10, 2, -73, 57, 12, -54, -77, 42, -91, -57, 18, 98, -42, 8, -46, -6, -55, 99, 31, -31, -42, 76, 33, -25, 39, 45, -51, -41, -15, -45, -82, -88, 103, 
  74, -53, -37, -10, 73, 77, -5, -42, -90, 24, -98, -84, 5, -40, 78, 12, -67, 39, 25, -16, -74, 57, -84, 24, 1, 44, 39, -49, -88, 82, 65, 39, -8, -73, -63, 66, -13, 32, -103, -48, -3, -84, 34, -14, -2, 19, -19, -87, -75, -60, 79, -81, 62, -74, 60, 81, -67, 10, -61, -3, 18, -56, 64, -2, 5, -2, 53, 97, 79, -39, -69, 24, 76, 82, 41, 49, -41, -97, -19, 52, -101, -35, -79, 57, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 40,84 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0021359710954129696, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,40 } };
const TfArray<1, float> quant7_scale = { 1, { 0.017237985506653786, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,20 } };
const TfArray<1, float> quant8_scale = { 1, { 0.014973376877605915, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.020945174619555473, } };
const TfArray<1, int> quant9_zero = { 1, { -63 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 84, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 3360, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 96), (TfLiteIntArray*)&g0::tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_23_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_23_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_23_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_23_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_23_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
